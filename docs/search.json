[
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Fitting Exercise (Week 8)",
    "section": "",
    "text": "Load packages and data\n\n#Load packages \nlibrary(here)\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gtsummary)\nlibrary(knitr)\nlibrary(tidymodels) \n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.2.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.9     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ recipes::all_double()  masks gtsummary::all_double()\n✖ recipes::all_factor()  masks gtsummary::all_factor()\n✖ recipes::all_integer() masks gtsummary::all_integer()\n✖ recipes::all_logical() masks gtsummary::all_logical()\n✖ recipes::all_numeric() masks gtsummary::all_numeric()\n✖ scales::discard()      masks purrr::discard()\n✖ dplyr::filter()        masks stats::filter()\n✖ recipes::fixed()       masks stringr::fixed()\n✖ dplyr::lag()           masks stats::lag()\n✖ yardstick::spec()      masks readr::spec()\n✖ recipes::step()        masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(yardstick)\nlibrary(pROC)\n\nType 'citation(\"pROC\")' for a citation.\n\nAttaching package: 'pROC'\n\nThe following objects are masked from 'package:stats':\n\n    cov, smooth, var\n\n#read csv data\ndrug &lt;- read.csv(here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\"))\n\n#preview dataset\ndplyr::glimpse(drug) \n\nRows: 2,678\nColumns: 17\n$ ID   &lt;int&gt; 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, …\n$ CMT  &lt;int&gt; 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2,…\n$ EVID &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ EVI2 &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ MDV  &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ DV   &lt;dbl&gt; 0.00, 491.00, 605.00, 556.00, 310.00, 237.00, 147.00, 101.00, 72.…\n$ LNDV &lt;dbl&gt; 0.000, 6.196, 6.405, 6.321, 5.737, 5.468, 4.990, 4.615, 4.282, 3.…\n$ AMT  &lt;dbl&gt; 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, …\n$ TIME &lt;dbl&gt; 0.000, 0.200, 0.250, 0.367, 0.533, 0.700, 1.200, 2.200, 3.200, 4.…\n$ DOSE &lt;dbl&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2…\n$ OCC  &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RATE &lt;int&gt; 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0,…\n$ AGE  &lt;int&gt; 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 2…\n$ SEX  &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ WT   &lt;dbl&gt; 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3,…\n$ HT   &lt;dbl&gt; 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769…\n\n\nMake a plot that shows a line for each individual, with DV on the y-axis and time on the x-axis. Stratify by dose.\n\n#spaghetti plot \nggplot(drug, aes(x = TIME, y = DV, group = ID, color = factor(DOSE))) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Spaghetti Plot of DV over TIME Stratified by DOSE\",\n       x = \"TIME\",\n       y = \"DV\",\n       color = \"DOSE\")\n\n\n\n\n\n\n\n\nVery hard to tell the differences in the trajectory of DV across the DOSE groups, try log-transforming DV and remake the plot.\n\nggplot(drug, aes(x = TIME, y = log(DV), group = ID, color = factor(DOSE))) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Spaghetti Plot of log(DV) over TIME Stratified by DOSE\",\n       x = \"TIME\",\n       y = \"DV\",\n       color = \"DOSE\")\n\n\n\n\n\n\n\n\nIt looks like DV decreases faster over time among those from DOSE 25.\nKeeps only observations with OCC = 1.\n\ndrug2&lt;-drug[drug$OCC==1,]\n\nCreate a data frame of size 120 x 18 which excludes the observations with TIME = 0 and contains variable Y (total amount of drug for each individual).\n\n#create a new data frame that contains only observations with TIME = 0 \ndrug3&lt;-drug2[drug2$TIME == 0,]\n\n#exlude observations with TIME = 0 then compute the sum of the DV variable for each individual using dplyr::summarize()\nsum_dv &lt;- drug2 %&gt;%\n  filter(TIME != 0) %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y = sum(DV))\n\n#merge the two data frames above\nmerged_drug &lt;- left_join(drug3, sum_dv, by = \"ID\")\n\nConverts RACE, SEX and DOSE to factor variables and keeps variables Y,DOSE,AGE,SEX,RACE,WT,HT.\n\nmerged_drug2&lt;-merged_drug %&gt;%\n  mutate(RACE=factor(RACE),\n         SEX=factor(SEX),\n         DOSE=factor(DOSE)) %&gt;%\n  select(Y,DOSE,AGE,SEX,RACE,WT,HT)\n\n#preview new data frame\ndplyr::glimpse(merged_drug2) \n\nRows: 120\nColumns: 7\n$ Y    &lt;dbl&gt; 2690.52, 2638.81, 2149.61, 1788.89, 3126.37, 2336.89, 3007.20, 27…\n$ DOSE &lt;fct&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 37.5, 37.5, 37.5,…\n$ AGE  &lt;int&gt; 42, 24, 31, 46, 41, 27, 23, 20, 23, 28, 46, 22, 43, 50, 19, 26, 3…\n$ SEX  &lt;fct&gt; 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;fct&gt; 2, 2, 1, 1, 2, 2, 1, 88, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1…\n$ WT   &lt;dbl&gt; 94.3, 80.4, 71.8, 77.4, 64.3, 74.1, 87.9, 61.9, 65.3, 103.5, 83.0…\n$ HT   &lt;dbl&gt; 1.769997, 1.759850, 1.809847, 1.649993, 1.560052, 1.829862, 1.850…"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#data-processing-and-exploration",
    "href": "fitting-exercise/fitting-exercise.html#data-processing-and-exploration",
    "title": "Fitting Exercise (Week 8)",
    "section": "",
    "text": "Load packages and data\n\n#Load packages \nlibrary(here)\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gtsummary)\nlibrary(knitr)\nlibrary(tidymodels) \n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.2.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.9     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ recipes::all_double()  masks gtsummary::all_double()\n✖ recipes::all_factor()  masks gtsummary::all_factor()\n✖ recipes::all_integer() masks gtsummary::all_integer()\n✖ recipes::all_logical() masks gtsummary::all_logical()\n✖ recipes::all_numeric() masks gtsummary::all_numeric()\n✖ scales::discard()      masks purrr::discard()\n✖ dplyr::filter()        masks stats::filter()\n✖ recipes::fixed()       masks stringr::fixed()\n✖ dplyr::lag()           masks stats::lag()\n✖ yardstick::spec()      masks readr::spec()\n✖ recipes::step()        masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(yardstick)\nlibrary(pROC)\n\nType 'citation(\"pROC\")' for a citation.\n\nAttaching package: 'pROC'\n\nThe following objects are masked from 'package:stats':\n\n    cov, smooth, var\n\n#read csv data\ndrug &lt;- read.csv(here(\"fitting-exercise\", \"Mavoglurant_A2121_nmpk.csv\"))\n\n#preview dataset\ndplyr::glimpse(drug) \n\nRows: 2,678\nColumns: 17\n$ ID   &lt;int&gt; 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, 793, …\n$ CMT  &lt;int&gt; 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2,…\n$ EVID &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ EVI2 &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ MDV  &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ DV   &lt;dbl&gt; 0.00, 491.00, 605.00, 556.00, 310.00, 237.00, 147.00, 101.00, 72.…\n$ LNDV &lt;dbl&gt; 0.000, 6.196, 6.405, 6.321, 5.737, 5.468, 4.990, 4.615, 4.282, 3.…\n$ AMT  &lt;dbl&gt; 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, …\n$ TIME &lt;dbl&gt; 0.000, 0.200, 0.250, 0.367, 0.533, 0.700, 1.200, 2.200, 3.200, 4.…\n$ DOSE &lt;dbl&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2…\n$ OCC  &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RATE &lt;int&gt; 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0,…\n$ AGE  &lt;int&gt; 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 2…\n$ SEX  &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ WT   &lt;dbl&gt; 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3, 94.3,…\n$ HT   &lt;dbl&gt; 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769997, 1.769…\n\n\nMake a plot that shows a line for each individual, with DV on the y-axis and time on the x-axis. Stratify by dose.\n\n#spaghetti plot \nggplot(drug, aes(x = TIME, y = DV, group = ID, color = factor(DOSE))) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Spaghetti Plot of DV over TIME Stratified by DOSE\",\n       x = \"TIME\",\n       y = \"DV\",\n       color = \"DOSE\")\n\n\n\n\n\n\n\n\nVery hard to tell the differences in the trajectory of DV across the DOSE groups, try log-transforming DV and remake the plot.\n\nggplot(drug, aes(x = TIME, y = log(DV), group = ID, color = factor(DOSE))) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Spaghetti Plot of log(DV) over TIME Stratified by DOSE\",\n       x = \"TIME\",\n       y = \"DV\",\n       color = \"DOSE\")\n\n\n\n\n\n\n\n\nIt looks like DV decreases faster over time among those from DOSE 25.\nKeeps only observations with OCC = 1.\n\ndrug2&lt;-drug[drug$OCC==1,]\n\nCreate a data frame of size 120 x 18 which excludes the observations with TIME = 0 and contains variable Y (total amount of drug for each individual).\n\n#create a new data frame that contains only observations with TIME = 0 \ndrug3&lt;-drug2[drug2$TIME == 0,]\n\n#exlude observations with TIME = 0 then compute the sum of the DV variable for each individual using dplyr::summarize()\nsum_dv &lt;- drug2 %&gt;%\n  filter(TIME != 0) %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y = sum(DV))\n\n#merge the two data frames above\nmerged_drug &lt;- left_join(drug3, sum_dv, by = \"ID\")\n\nConverts RACE, SEX and DOSE to factor variables and keeps variables Y,DOSE,AGE,SEX,RACE,WT,HT.\n\nmerged_drug2&lt;-merged_drug %&gt;%\n  mutate(RACE=factor(RACE),\n         SEX=factor(SEX),\n         DOSE=factor(DOSE)) %&gt;%\n  select(Y,DOSE,AGE,SEX,RACE,WT,HT)\n\n#preview new data frame\ndplyr::glimpse(merged_drug2) \n\nRows: 120\nColumns: 7\n$ Y    &lt;dbl&gt; 2690.52, 2638.81, 2149.61, 1788.89, 3126.37, 2336.89, 3007.20, 27…\n$ DOSE &lt;fct&gt; 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 37.5, 37.5, 37.5,…\n$ AGE  &lt;int&gt; 42, 24, 31, 46, 41, 27, 23, 20, 23, 28, 46, 22, 43, 50, 19, 26, 3…\n$ SEX  &lt;fct&gt; 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ RACE &lt;fct&gt; 2, 2, 1, 1, 2, 2, 1, 88, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1…\n$ WT   &lt;dbl&gt; 94.3, 80.4, 71.8, 77.4, 64.3, 74.1, 87.9, 61.9, 65.3, 103.5, 83.0…\n$ HT   &lt;dbl&gt; 1.769997, 1.759850, 1.809847, 1.649993, 1.560052, 1.829862, 1.850…"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#eda-revisited",
    "href": "fitting-exercise/fitting-exercise.html#eda-revisited",
    "title": "Fitting Exercise (Week 8)",
    "section": "EDA revisited",
    "text": "EDA revisited\nMake a descriptive table of the variables\n\n#get descriptive statistics of variables and create a table\ntable1&lt;-gtsummary::tbl_summary(merged_drug2, statistic = list(\n  all_continuous() ~ \"{mean}/{sd}\",\n  all_categorical() ~ \"{n} / {N} ({p}%)\"\n),)\nknitr::kable(table1,caption = \"Summary Table: Mean/SD or n/N(%)\")\n\n\nSummary Table: Mean/SD or n/N(%)\n\n\nCharacteristic\nN = 120\n\n\n\n\nY\n2,445/962\n\n\nDOSE\nNA\n\n\n25\n59 / 120 (49%)\n\n\n37.5\n12 / 120 (10%)\n\n\n50\n49 / 120 (41%)\n\n\nAGE\n33/9\n\n\nSEX\nNA\n\n\n1\n104 / 120 (87%)\n\n\n2\n16 / 120 (13%)\n\n\nRACE\nNA\n\n\n1\n74 / 120 (62%)\n\n\n2\n36 / 120 (30%)\n\n\n7\n2 / 120 (1.7%)\n\n\n88\n8 / 120 (6.7%)\n\n\nWT\n83/13\n\n\nHT\n1.76/0.09\n\n\n\n\n\nThe majority of the cohort are of DOSE 25, SEX 1,and Race 1.\nMake scatterplots between Y and continuous predictors (AGE, WT, HT)\n\n#Scatterplot: Y ~ AGE  \nggplot(merged_drug2, aes(AGE, Y)) + \n  geom_point()\n\n\n\n\n\n\n\n#Scatterplot: Y ~ WT  \nggplot(merged_drug2, aes(WT, Y)) + \n  geom_point()\n\n\n\n\n\n\n\n#Scatterplot: Y ~ HT  \nggplot(merged_drug2, aes(HT, Y)) + \n  geom_point()\n\n\n\n\n\n\n\n\nNo obvious linear associations observed between Y and AGE, WT, HT.\nMake boxplots between Y and categorical predictors (DOSE, SEX, RACE)\n\n#Boxplot: Y ~ DOSE  \nggplot(merged_drug2, aes(factor(DOSE), Y)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n#Boxplot: Y ~ SEX  \nggplot(merged_drug2, aes(SEX, Y)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n#Boxplot: Y ~ RACE  \nggplot(merged_drug2, aes(RACE, Y)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\nIndividuals of different RACE groups or SEX groups have similar average value of Y. There seems to be a positive association between Y and DOSE.\nMake histograms for variables Y,AGE, WT, HT.\n\n#histogram for Y  \nhist(merged_drug2$Y)\n\n\n\n\n\n\n\n#histogram for AGE  \nhist(merged_drug2$AGE)\n\n\n\n\n\n\n\n#histogram for WT  \nhist(merged_drug2$WT)\n\n\n\n\n\n\n\n#histogram for HT.  \nhist(merged_drug2$HT)\n\n\n\n\n\n\n\n\nThese variables have a generally normal distribution. No obvious outliers are observed.\nMake scatterplot matrix for variables Y,AGE, WT, HT to inspect correlations.\n\npairs(merged_drug2[, c(\"Y\", \"AGE\", \"WT\", \"HT\")], main = \"Scatter Plot Matrix for Y,AGE, WT, HT\")\n\n\n\n\n\n\n\n\nWT and HT have relatively high correlation.\nSave the clean data frame locally\n\nsaveRDS(merged_drug2, file =  here(\"fitting-exercise\", \"merged_drug2.rds\"))"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting",
    "title": "Fitting Exercise (Week 8)",
    "section": "Model fitting",
    "text": "Model fitting\nFit a linear model to the continuous outcome (Y) using the main predictor of interest DOSE, and calculate RMSE and R-squared.\n\n#fit linear model: Y~DOSE\nmodel1 &lt;- lm(Y ~ DOSE, data = merged_drug2)\nsummary(model1)\n\n\nCall:\nlm(formula = Y ~ DOSE, data = merged_drug2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1290.1  -445.6   -90.9   352.2  2367.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1782.67      87.85  20.292  &lt; 2e-16 ***\nDOSE37.5      681.24     213.69   3.188  0.00184 ** \nDOSE50       1456.20     130.43  11.165  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 674.8 on 117 degrees of freedom\nMultiple R-squared:  0.5159,    Adjusted R-squared:  0.5076 \nF-statistic: 62.33 on 2 and 117 DF,  p-value: &lt; 2.2e-16\n\n# make predictions on the original data\npredictions1 &lt;- predict(model1, newdata = merged_drug2)\n\n# Compute RMSE and R-squared\nrmse_1 &lt;- rmse_vec(merged_drug2$Y, predictions1)\nrsquared_1 &lt;- rsq_vec(merged_drug2$Y, predictions1)\n\n# print RMSE and R-squared\ncat(\"RMSE:\", rmse_1, \"\\n\")\n\nRMSE: 666.3137 \n\ncat(\"R-squared:\", rsquared_1, \"\\n\")\n\nR-squared: 0.5158598 \n\n\nY of DOSE 37.5 (p-value=0.002) and Y of DOSE 50 (p-value&lt;.001) are significantly higher than Y of DOSE 25. RMSE is 666.3, and R-squared is 0.516.\nFit a linear model to the continuous outcome (Y) using the all predictor,and calculate RMSE and R-squared.\n\n#fit linear model: Y~DOSE+AGE+SEX+RACE+WT+HT\nmodel2 &lt;- lm(Y ~ DOSE+AGE+SEX+RACE+WT+HT, data = merged_drug2)\nsummary(model2)\n\n\nCall:\nlm(formula = Y ~ DOSE + AGE + SEX + RACE + WT + HT, data = merged_drug2)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1496.97  -362.81   -71.26   285.84  2421.48 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 4890.923   1822.710   2.683 0.008415 ** \nDOSE37.5     663.683    200.448   3.311 0.001258 ** \nDOSE50      1499.048    122.462  12.241  &lt; 2e-16 ***\nAGE            3.521      7.895   0.446 0.656517    \nSEX2        -360.048    217.775  -1.653 0.101121    \nRACE2        148.883    129.821   1.147 0.253936    \nRACE7       -420.950    451.163  -0.933 0.352846    \nRACE88       -65.300    246.961  -0.264 0.791954    \nWT           -23.281      6.440  -3.615 0.000454 ***\nHT          -741.050   1108.100  -0.669 0.505051    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 616.6 on 110 degrees of freedom\nMultiple R-squared:   0.62, Adjusted R-squared:  0.5889 \nF-statistic: 19.94 on 9 and 110 DF,  p-value: &lt; 2.2e-16\n\n# make predictions on the original data\npredictions2 &lt;- predict(model2, newdata = merged_drug2)\n\n# Compute RMSE and R-squared\nrmse_2 &lt;- rmse_vec(merged_drug2$Y, predictions2)\nrsquared_2 &lt;- rsq_vec(merged_drug2$Y, predictions2)\n\n# print RMSE and R-squared\ncat(\"RMSE:\", rmse_2, \"\\n\")\n\nRMSE: 590.3153 \n\ncat(\"R-squared:\", rsquared_2, \"\\n\")\n\nR-squared: 0.6200016 \n\n\nAfter adjusting for covariates, Y of DOSE 37.5 (p-value=0.001) and Y of DOSE 50 (p-value&lt;.001) are significantly higher than Y of DOSE 25. One unit increase in WT (p-value&lt;.001) is significantly associated with a decrease of 23.3 in Y. Other covariates are not significantly associated with Y. RMSE is 590.3, and R-squared is 0.62. This model has better fit than the model with only DOSE as predictor.\nFit a logistic model to the SEX using the main predictor DOSE,and calculate accuracy and ROC-AUC.\n\n# fit logistic model: SEX~DOSE\nlogistic_model &lt;- logistic_reg(mode = \"classification\") %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\nmodel3 &lt;- logistic_model %&gt;% \n  fit(SEX ~ DOSE, data = merged_drug2)\n\n#calculate odds ratios\nmodel_estimates &lt;- tidy(model3, conf.int = TRUE)\nmodel_estimates$odds_ratio &lt;- exp(model_estimates$estimate)\n\n# display model estimates and odds ratios\nprint(model_estimates[, c(\"term\", \"estimate\", \"conf.low\", \"conf.high\", \"odds_ratio\",\"p.value\")])\n\n# A tibble: 3 × 6\n  term        estimate conf.low conf.high odds_ratio    p.value\n  &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 (Intercept)  -1.59      -2.33    -0.953      0.204 0.00000465\n2 DOSE37.5     -0.0202    -1.99     1.50       0.980 0.981     \n3 DOSE50       -0.831     -2.18     0.339      0.436 0.185     \n\n# Make predictions on the original data\nprediction3 &lt;- predict(model3, new_data = merged_drug2)\nprediction3$SEX&lt;-merged_drug2$SEX\n\n# Compute accuracy\naccuracy_value3 &lt;- accuracy(prediction3, truth = SEX, estimate = .pred_class)\n\n# Compute AUC\nroc_curve3 &lt;- roc(as.numeric(prediction3$SEX),as.numeric( prediction3$.pred_class))\n\nSetting levels: control = 1, case = 2\n\n\nSetting direction: controls &lt; cases\n\nauc_value3 &lt;- auc(roc_curve3)\n\n# Print accuracy and AUC\ncat(\"Accuracy:\", accuracy_value3$.estimate, \"\\n\")\n\nAccuracy: 0.8666667 \n\ncat(\"AUC:\", auc_value3, \"\\n\")\n\nAUC: 0.5 \n\n\nThere is no significant association between DOSE and SEX. The accuracy of the model is 0.867 and the AUC is 0.5.\nFit a logistic model to the SEX using the main predictor DOSE,and calculate accuracy and ROC-AUC.\n\n# fit logistic model: SEX~DOSE\nlogistic_model &lt;- logistic_reg(mode = \"classification\") %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\nmodel4 &lt;- logistic_model %&gt;% \n  fit(SEX ~ DOSE + Y + AGE + HT + WT + RACE, data = merged_drug2)\n\n#calculate odds ratios\nmodel_estimates &lt;- tidy(model4, conf.int = TRUE)\nmodel_estimates$odds_ratio &lt;- exp(model_estimates$estimate)\n\n# display model estimates and odds ratios\nprint(model_estimates[, c(\"term\", \"estimate\", \"conf.low\", \"conf.high\", \"odds_ratio\",\"p.value\")])\n\n# A tibble: 10 × 6\n   term         estimate  conf.low  conf.high odds_ratio  p.value\n   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)  59.1      30.5     103.         4.83e+25 0.000779\n 2 DOSE37.5     -2.51     -6.86      1.24       8.12e- 2 0.219   \n 3 DOSE50       -0.618    -4.86      2.90       5.39e- 1 0.746   \n 4 Y            -0.00111  -0.00322   0.000624   9.99e- 1 0.245   \n 5 AGE           0.113    -0.0148    0.261      1.12e+ 0 0.101   \n 6 HT          -32.0     -58.0     -15.0        1.28e-14 0.00210 \n 7 WT           -0.0923   -0.262     0.0667     9.12e- 1 0.248   \n 8 RACE2        -2.27     -5.73      0.235      1.03e- 1 0.125   \n 9 RACE7        -0.443    -7.08      5.52       6.42e- 1 0.919   \n10 RACE88       -2.02     -7.21      1.98       1.33e- 1 0.406   \n\n# Make predictions on the original data\nprediction4 &lt;- predict(model4, new_data = merged_drug2)\nprediction4$SEX&lt;-merged_drug2$SEX\n\n# Compute accuracy\naccuracy_value4 &lt;- accuracy(prediction4, truth = SEX, estimate = .pred_class)\n\n# Compute AUC\nroc_curve4 &lt;- roc(as.numeric(prediction4$SEX),as.numeric( prediction4$.pred_class))\n\nSetting levels: control = 1, case = 2\n\n\nSetting direction: controls &lt; cases\n\nauc_value4 &lt;- auc(roc_curve4)\n\n# Print accuracy and AUC\ncat(\"Accuracy:\", accuracy_value4$.estimate, \"\\n\")\n\nAccuracy: 0.9583333 \n\ncat(\"AUC:\", auc_value4, \"\\n\")\n\nAUC: 0.8966346 \n\n\nThere is still no significant association between DOSE and SEX. Only HT is significantly associated with SEX. The accuracy of the model is 0.958 and the AUC is 0.897. This model has better fit than the model with only DOSE as predictor."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#this-section-added-by-liza-hall",
    "href": "fitting-exercise/fitting-exercise.html#this-section-added-by-liza-hall",
    "title": "Fitting Exercise (Week 8)",
    "section": "This section added by Liza Hall",
    "text": "This section added by Liza Hall\n\n\n\nModel Predictions\n\nPredicted Values VS Observed Values\nLoad necessecary libraries\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\nGenerate predictions for both models.\n\n# Prediction for Model 1 (DOSE as predictor)\npred1 &lt;- predict(linfit1, train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  select(Y, .pred) %&gt;%\n  mutate(model = \"DOSE Only\")\n\n# Prediction for Model 2 (All variables as predictors)\npred2 &lt;- predict(linfit2, train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  select(Y, .pred) %&gt;%\n  mutate(model = \"All Predictors\")\n\nManually create predictions for null model based on the mean.\n\n# Prediction for Null Model (mean prediction)\ntrain_data$null_pred &lt;- meanY # meanY calculated previously as mean(train_data$Y)\nnull_model_pred &lt;- train_data %&gt;%\n  select(Y, null_pred) %&gt;%\n  rename(.pred = null_pred) %&gt;%\n  mutate(model = \"Null Model\")\n\ntrain_data &lt;- train_data %&gt;% select(-null_pred)\n\nCombine all predictions into one dataset.\n\n# Combine all predictions into one data frame\ncombined_predictions &lt;- bind_rows(pred1, pred2, null_model_pred)\n\nPlotting the graph with ggplot.\n\n# Plotting with ggplot\nggplot(combined_predictions, aes(x = Y, y = .pred, color = model)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray\") + # 45 degree line\n  scale_x_continuous(limits = c(0, 5000)) +\n  scale_y_continuous(limits = c(0, 5000)) +\n  labs(x = \"Observed\", y = \"Predicted\", title = \"Observed vs. Predicted Values\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"DOSE Only\" = \"#5c88da\", \"All Predictors\" = \"#84bd00\", \"Null Model\" = \"#ffcd00\")) +\n  theme(\n    plot.background = element_rect(fill = \"gray99\", color = NA), # Change the entire plot background\n    panel.background = element_rect(fill = \"gray99\", color = NA) # Change the plotting area background\n  )\n\n\n\n\n\n\n\n\n\n\nPredicted Values VS Residuals\nCalculate residuals for model 2.\n\n# Calculate residuals for Model 2\nmodel2_residuals &lt;- pred2 %&gt;%\n  mutate(residuals = .pred - Y)\n\nFinding the range for the Y-axis.\nThis ensures it goes into the positive and negative by the same amount.\n\n# Finding the range for Y-axis to ensure it goes the same amount into positive and negative direction\nmax_abs_residual &lt;- max(abs(model2_residuals$residuals))\n\nPlotting the graph with ggplot.\n\n# Plotting Predicted vs. Residuals for Model 2\nggplot(model2_residuals, aes(x = .pred, y = residuals)) +\n  geom_point(colour=\"#5c88da\") +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") + # Straight line at 0\n  scale_y_continuous(limits = c(-max_abs_residual, max_abs_residual)) + # Same amount in positive and negative direction\n  labs(x = \"Predicted\", y = \"Residuals\", title = \"Predicted vs. Residuals for All Predictors Model\") +\n  theme_minimal() +\n  theme(\n    plot.background = element_rect(fill = \"gray99\", color = NA), # Change the entire plot background\n    panel.background = element_rect(fill = \"gray99\", color = NA) # Change the plotting area background\n  )\n\n\n\n\n\n\n\n\n\n\n\nModel Predictions and Uncertainty\n\n\n\nPredicted Values VS Observed Values\nLoad required libraries.\n\nlibrary(rsample)\n\nSet seed and create bootstraps.\n\nset.seed(rngseed)\n\ndat_bs &lt;- bootstraps(train_data, times = 100)\n\nInitialize list to store predictions, then loop over bootstrap samples and store predcitions in list. Also, assigning original predictions to ‘orig_pred’ for easier managment.\n\n# Initialize a list to store predictions\npred_bs &lt;- list()\n\n# Loop over each bootstrap sample in 'dat_bs'\nfor(i in 1:length(dat_bs$splits)) {\n \n  # Extract the bootstrap sample\n  dat_sample = rsample::analysis(dat_bs$splits[[i]])\n  \n  # Fit the model to the bootstrap sample \n  linfit2 &lt;- lin_mod %&gt;% fit(Y ~ ., data = dat_sample)\n  \n  # Make predictions on the original training data\n  predictions &lt;- predict(linfit2, new_data = train_data)\n  \n  # Store predictions\n  pred_bs[[i]] &lt;- predictions\n}\n\n# Assigning original predictions \norig_pred &lt;- pred2$.pred\n\nConvert vector list into matrix. Then the mean, lower CI, and upper CI are calculated for each row of bootstrap samples. After this is done, the values are assigned to ‘train_data’ for plotting.\n\n# Convert the list of vectors into a matrix\npred_matrix &lt;- do.call(cbind, pred_bs)\n\n# Calculate the median, lower CI, and upper CI for each row across bootstrap samples\npreds &lt;- apply(pred_matrix, 1, function(x) quantile(x, probs = c(0.025, 0.5, 0.975)))\npreds &lt;- t(preds) \n\n# Assign\ntrain_data$median_pred &lt;- preds[, 2] # Median\ntrain_data$lower_ci &lt;- preds[, 1] # Lower CI\ntrain_data$upper_ci &lt;- preds[, 3] # Upper CI\n\nPlotting the graph.\n\n# Plotting\nggplot(train_data, aes(x = Y)) +\n  geom_point(aes(y = orig_pred, color = \"Original Predictions\"), size = 1.5) +\n  geom_point(aes(y = median_pred, color = \"Median Predictions\"), size = 1.5) +\n  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci, color = \"Confidence Intervals\"), width = 0.2, alpha = 0.8) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray\") +\n  scale_x_continuous(limits = c(0, max(train_data$Y))) +\n  scale_y_continuous(limits = c(0, max(c(train_data$orig_pred, train_data$upper_ci)))) +\n  labs(x = \"Observed Values\", y = \"Predicted Values with Confidence Intervals\", \n       title = \"Observed Values vs. Predicted Values with Confidence Intervals\") +\n  scale_color_manual(values = c(\"Original Predictions\" = \"#84bd00\",\n                                \"Median Predictions\" = \"#5c88da\",\n                                \"Confidence Intervals\" = \"#ffcd00\")) +\n  theme_minimal() +\n   theme(\n    plot.background = element_rect(fill = \"gray99\", color = NA), # Change the entire plot background\n    panel.background = element_rect(fill = \"gray99\", color = NA) # Change the plotting area background\n  ) +\n  guides(color = guide_legend(title = \"Legend\")) +\n  theme(legend.position = \"right\", \n        legend.text = element_text(size = 8), \n        legend.title = element_text(size = 9), \n        legend.key.size = unit(0.5, \"cm\"), \n        legend.spacing.x = unit(0.2, \"cm\"), \n        legend.spacing.y = unit(0.1, \"cm\")) \n\n\n\n\n\n\n\n\n\n\n\n\nInterpretation\nAs seen in the graph above, the points on the graph are relatively close to the line of perfect fit, which suggests that the model’s predictions are reasonably accurate. The model does seem to be better at predicting the lower values of Y however, as seen by the cluster of points near the line of perfect fit, towards the bottom left of the graph. As the values of Y get higher, however, the points become more scattered, indicating that the model is not at good at predicting the higher Y values. There also somewhat appears to be a pattern in the error bars, which also indicates that the model may be better at predicting the lower values of Y."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#final-evaluation-using-test-data",
    "href": "fitting-exercise/fitting-exercise.html#final-evaluation-using-test-data",
    "title": "Fitting Exercise (Week 8)",
    "section": "Final evaluation using test data",
    "text": "Final evaluation using test data\nUse model 2 to make predictions for the test data and create a dataframe that contains observed data and predicted data for both train data and test data.\n\n#make predictions using test data\npred_test &lt;- predict(linfit2, new_data = test_data)$.pred\n\n#create dataframes for predictions on train data and test data respectively\ntest_pred &lt;- data.frame(\n  Observed  = test_data$Y,\n  Predicted  = pred_test,\n  label=\"Predictions on test data\")\n\ntrain_pred &lt;- data.frame(\n  Observed  = train_data$Y,\n  Predicted  = pred2$.pred,\n  label=\"Predictions on train data\")\n\n#concatenate two dataframes above\ngraph_3&lt;-rbind(train_pred,test_pred)\n\nPlot predicted versus observed values for both the train data and test data\n\nggplot(graph_3, aes(x = Observed, y = Predicted, color = label, shape=label)) +\n  geom_point() +  \n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"grey\") +  \n  labs(x = \"Observed Values\", y = \"Predicted Values\", title = \"Observed vs. Predicted Values by Train/Test data\", color = \"Train/Test Data\", shape =\"Train/Test Data\" ) +\n  theme_minimal() + # Use a minimal theme for aesthetics\n  scale_shape_manual(values = c(15, 17)) + # Set different shapes for train/test predictions\n  scale_color_manual(values = c(\"blue\", \"green\"))"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#overall-model-assessment",
    "href": "fitting-exercise/fitting-exercise.html#overall-model-assessment",
    "title": "Fitting Exercise (Week 8)",
    "section": "Overall model assessment",
    "text": "Overall model assessment\nModel 1(DOSE) and Model 2(all predictors) both have much lower RMSE than the null model, regardless of fitting the model directly to train data or using cross-validation. This indicates Model 1 and Model 2 have better performance than the null model.\nAlthough Model 1 performs better than the null model, it does not predicts well. In the observed vs predicted value plot, predictions from Model 1 form three horizontal lines along the diagonal reference line. Model 1 is not able to capture the main pattern in the data. This is probably due to the lack of variation in DOSE which has only three values. I would not use Model 1 to make predictions for real purposes.\nModel 2 has better performance with additional predictors added. It has the lowest RMSE; the data points on observed vs predicted plot generally scatter around the diagonal line, the confidence intervals for predictions are not too wide; and there is no obvious odd pattern in the residual vs predicted value plot. This indicates Model 2 performs well and can captures the main pattern in the data. Most importantly, the data points on the observed vs predicted plot using the test data scatter around the diagonal line, which indicates the predictions on the test data are generally accurate. I would use this model to make predictions. But I would be careful for predicted values that are too high (roughly over 4000),as the observed vs predicted plot indicates lower accuracy for that range."
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Liza Hall contributed to this exercise.\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\ncharacter.min\ncharacter.max\ncharacter.empty\ncharacter.n_unique\ncharacter.whitespace\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\ncharacter\nEye\n0\n1\n4\n5\n0\n4\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nGender\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nAge\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n33.33333\n17.62810\n16\n23\n24\n45\n67\n▇▂▂▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender.\n\n\n\n\n\nFigure 2 shows a boxplot produced by one of the R scripts. This plot illustrates the distribution of height for people of different eye colors. In general, people of different eye colors have different distributions in height. People of black eyes have the highest median height, and people of brown eyes have the lowest median height.\n\n\n\n\n\n\n\n\nFigure 2: Height by Eye Color\n\n\n\n\n\nFigure 3 shows a scatterplot produced by one of the R scripts. This plot illustrates the correlation between weight and age. In general, we observed a linear relationship between weight and age, with a higher weight associated with a higher age.\n\n\n\n\n\n\n\n\nFigure 3: Weight and Age"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\n\nExample Table 3 shows a summary of a linear model fit using height as outcome and age and eye color as predictors. Coefficient estimates, standard errors, test statistics and p-values are presented. One additional year in age is significantly associated with a decrease of 0.834 cm in height (P-value=0.006). Compared to people with black eyes, people of brown eyes are averagely 23.052 cm shorter (P-value=0.007).\n\n\n\n\nTable 3: Linear model fit table: Height= Age + Eye Color.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n199.6310606\n5.2410799\n38.089681\n0.0000028\n\n\nAge\n-0.8340909\n0.1591457\n-5.241053\n0.0063357\n\n\nEyeblue\n-4.2742424\n5.0315101\n-0.849495\n0.4434597\n\n\nEyebrown\n-23.0522727\n4.5041323\n-5.118028\n0.0068956\n\n\nEyeother\n22.2530303\n9.0282358\n2.464826\n0.0693309"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "The graph that I select to reproduce is from USA Facts (https://usafacts.org/topics/health/#what-is-the-life-expectancy-of-someone-born-today-in-the-us). The original graph shows the trends of life expectancy at birth for males, females and both sexes in the US from 1980 to 2022. Under the graph I found the link to the data of the graph which is provided by National Vital Statistics System. The data can be downloaded here (https://www.cdc.gov/nchs/hus/data-finder.htm?year=2020-2021&table=Table%20LExpMort). I copied the data for the graph only and save it to a csv file in the project folder."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#data-source",
    "href": "presentation-exercise/presentation-exercise.html#data-source",
    "title": "Presentation Exercise",
    "section": "",
    "text": "The graph that I select to reproduce is from USA Facts (https://usafacts.org/topics/health/#what-is-the-life-expectancy-of-someone-born-today-in-the-us). The original graph shows the trends of life expectancy at birth for males, females and both sexes in the US from 1980 to 2022. Under the graph I found the link to the data of the graph which is provided by National Vital Statistics System. The data can be downloaded here (https://www.cdc.gov/nchs/hus/data-finder.htm?year=2020-2021&table=Table%20LExpMort). I copied the data for the graph only and save it to a csv file in the project folder."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#load-packages-and-data",
    "href": "presentation-exercise/presentation-exercise.html#load-packages-and-data",
    "title": "Presentation Exercise",
    "section": "Load packages and data",
    "text": "Load packages and data\n\n#load packages\nlibrary(\"here\")\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(\"knitr\")\nlibrary(\"ggplot2\")\nlibrary(\"gt\")\n\n#read csv data\nlife_exp &lt;- read.csv(here(\"presentation-exercise\", \"life_expectancy.csv\"))\n\n#preview dataset\ndplyr::glimpse(life_exp) \n\nRows: 43\nColumns: 4\n$ year       &lt;int&gt; 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,…\n$ both_sexes &lt;dbl&gt; 73.7, 74.1, 74.5, 74.6, 74.7, 74.7, 74.7, 74.9, 74.9, 75.1,…\n$ male       &lt;dbl&gt; 70.0, 70.4, 70.8, 71.0, 71.1, 71.1, 71.2, 71.4, 71.4, 71.7,…\n$ female     &lt;dbl&gt; 77.4, 77.8, 78.1, 78.1, 78.2, 78.2, 78.2, 78.3, 78.3, 78.5,…"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#use-chatgpt-to-create-r-codes-for-the-graph",
    "href": "presentation-exercise/presentation-exercise.html#use-chatgpt-to-create-r-codes-for-the-graph",
    "title": "Presentation Exercise",
    "section": "Use ChatGPT to create R codes for the graph",
    "text": "Use ChatGPT to create R codes for the graph\nBecause the data for the graph is relatively clean and simple, I directly feed the data to ChatGPT. Then I describe the structure of the dataset to ChatGPT and specify what the graph should look like. I have copied the prompt below.\n” This dataset has 5 variables. Both_sexes, male, and female are the variables that contain life expectancy for both sexes, males, and females, respectively. Use this dataset to create a line plot using R codes. The line plot should show the trends of life expectancy for both sexes, males and females separately. year should be on the x axis, life expectancy on the y axis. On the x axis, there should be 5 ticks (1980, 1990, 2000, 2010, 2020). There should be 6 ticks on the y axis (70,72,74,76,78,80). There should be grids for the ticks. The line for female should be pink, the line for male should be dark blue, the line for both sexes should be green. ”\n\n# The codes below are generated by ChatGPT\n# Create the line plot\nggplot(life_exp, aes(x = year)) +\n  geom_line(aes(y = both_sexes, color = \"Both Sexes\"), size = 1) +\n  geom_line(aes(y = male, color = \"Male\"), size = 1) +\n  geom_line(aes(y = female, color = \"Female\"), size = 1) +\n  scale_x_continuous(breaks = c(1980, 1990, 2000, 2010, 2020), minor_breaks = NULL) +\n  scale_y_continuous(breaks = c(70, 72, 74, 76, 78, 80), minor_breaks = NULL) +\n  labs(title = \"Life Expectancy Trends\",\n       x = \"Year\",\n       y = \"Life Expectancy\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_line(colour = \"gray\", linetype = \"dashed\"),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.title = element_blank()) +\n  scale_color_manual(values = c(\"darkblue\", \"pink\", \"green\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nChatGPT did a really good job for this very first prompt. But the colors didn’t look right. I had to manually change the line colors, the title, thickness of the line, legend labels, grid types, and remove x/y-axis title so that the graph looks more like the original one.\n\n# Manually tuned graph\nggplot(life_exp, aes(x = year)) +\n  geom_line(aes(y = both_sexes, color = \"Life expectancy at birth\"), size = 3) +\n  geom_line(aes(y = male, color = \"Male\"), size = 1.5) +\n  geom_line(aes(y = female, color = \"Female\"), size = 1.5) +\n  geom_point(data = life_exp %&gt;% filter(year == max(life_exp$year)),\n             aes(y = both_sexes), color = \"forestgreen\", size = 4, shape = 19) +\n  geom_point(data = life_exp %&gt;% filter(year == max(life_exp$year)),\n             aes(y = male), color = \"darkblue\", size = 4, shape = 19) +\n  geom_point(data = life_exp %&gt;% filter(year == max(life_exp$year)),\n             aes(y = female), color = \"deeppink\", size = 4, shape = 19) +\n  scale_x_continuous(breaks = c(1980, 1990, 2000, 2010, 2020), minor_breaks = NULL) +\n  scale_y_continuous(breaks = c(70, 72, 74, 76, 78, 80), minor_breaks = NULL) +\n  labs(title = \"Life expectancy at birth\",\n       subtitle = \"In 2022, a newborn in the US was expected to live 77.5 years\",\n       x = \"\",\n       y = \"\") +\n  theme_minimal() +\n  theme(panel.grid.major = element_line(colour = \"gray\", linetype = 1),\n        panel.grid.minor = element_blank(),\n        legend.position='top', \n        legend.justification='left',\n        legend.direction='horizontal',\n        legend.title = element_blank()) +\n  scale_color_manual(values = c(\"deeppink\",\"forestgreen\",\"darkblue\" ))\n\n\n\n\n\n\n\n\nNow the reproduced graph looks very much like the original one. For comparison, the original graph is attached below."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#create-a-publication-quality-table",
    "href": "presentation-exercise/presentation-exercise.html#create-a-publication-quality-table",
    "title": "Presentation Exercise",
    "section": "Create a publication quality table",
    "text": "Create a publication quality table\nThe dataset itself is the content that I want to present, so there is no need to make a summary of the numbers. I asked ChatGPT to create a table of publication quality using the gt() package. After manually tuning the main title and column titles, the table looked satisfying.\n\n# Create a gt table\ntable1 &lt;- life_exp %&gt;%\n  gt() %&gt;%\n  cols_label(\n    year=\"Year\",\n    both_sexes=\"Both Sexes\",\n    male=\"Male\",\n    female=\"Female\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Life expectancy (years)\",\n    columns = c(both_sexes, male, female),\n  ) %&gt;%\n  tab_header(\n    title = \"Life expectancy at birth in the U.S. by sex, 1980-2022\",\n  ) \n\n# Print the table\ntable1\n\n\n\n\n\n\n\nLife expectancy at birth in the U.S. by sex, 1980-2022\n\n\nYear\nLife expectancy (years)\n\n\nBoth Sexes\nMale\nFemale\n\n\n\n\n1980\n73.7\n70.0\n77.4\n\n\n1981\n74.1\n70.4\n77.8\n\n\n1982\n74.5\n70.8\n78.1\n\n\n1983\n74.6\n71.0\n78.1\n\n\n1984\n74.7\n71.1\n78.2\n\n\n1985\n74.7\n71.1\n78.2\n\n\n1986\n74.7\n71.2\n78.2\n\n\n1987\n74.9\n71.4\n78.3\n\n\n1988\n74.9\n71.4\n78.3\n\n\n1989\n75.1\n71.7\n78.5\n\n\n1990\n75.4\n71.8\n78.8\n\n\n1991\n75.5\n72.0\n78.9\n\n\n1992\n75.8\n72.3\n79.1\n\n\n1993\n75.5\n72.2\n78.8\n\n\n1994\n75.7\n72.4\n79.0\n\n\n1995\n75.8\n72.5\n78.9\n\n\n1996\n76.1\n73.1\n79.1\n\n\n1997\n76.5\n73.6\n79.4\n\n\n1998\n76.7\n73.8\n79.5\n\n\n1999\n76.7\n73.9\n79.4\n\n\n2000\n76.8\n74.1\n79.3\n\n\n2001\n77.0\n74.3\n79.5\n\n\n2002\n77.0\n74.4\n79.6\n\n\n2003\n77.2\n74.5\n79.7\n\n\n2004\n77.6\n75.0\n80.1\n\n\n2005\n77.6\n75.0\n80.1\n\n\n2006\n77.8\n75.2\n80.3\n\n\n2007\n78.1\n75.5\n80.6\n\n\n2008\n78.2\n75.6\n80.6\n\n\n2009\n78.5\n76.0\n80.9\n\n\n2010\n78.7\n76.3\n81.0\n\n\n2011\n78.7\n76.3\n81.1\n\n\n2012\n78.8\n76.4\n81.2\n\n\n2013\n78.8\n76.4\n81.2\n\n\n2014\n78.9\n76.5\n81.3\n\n\n2015\n78.7\n76.3\n81.1\n\n\n2016\n78.7\n76.2\n81.1\n\n\n2017\n78.6\n76.1\n81.1\n\n\n2018\n78.7\n76.2\n81.2\n\n\n2019\n78.8\n76.3\n81.4\n\n\n2020\n77.3\n74.5\n79.9\n\n\n2021\n76.4\n73.5\n79.3\n\n\n2022\n77.5\n74.5\n80.2"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Eye                   0             1   4   5     0        4          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  33.3 17.6  16  23  24  45   67 ▇▂▂▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nBox plot with eye on x-axis and height on y-axis\n\np5 &lt;- mydata %&gt;% ggplot(aes(x=Eye, y=Height)) + geom_boxplot()\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"eye-height.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\n\n\nScatter plot with weight on x-axis and age on y-axis\n\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=Age)) + geom_point() + geom_smooth(method='lm')\nplot(p6)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-age.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile 2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile 2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/chaoh/Desktop/UGA Courses/4_Spring 2024/EPID 8060E/MADA/chaohuali-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Age             Age in years                          numeric value &gt;0 or NA  \n5 Eye             Eye color (Black/Brown/Blue/Other)    black/brown/blue/other/…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n$ Age    &lt;dbl&gt; 33, 23, 25, 23, 67, 17, 45, 67, 42, 23, 34, 52, 16, 24\n$ Eye    &lt;chr&gt; \"black\", \"black\", \"black\", \"black\", \"blue\", \"blue\", \"blue\", \"ot…\n\nsummary(rawdata)\n\n    Height              Weight          Gender               Age       \n Length:14          Min.   :  45.0   Length:14          Min.   :16.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:23.00  \n Mode  :character   Median :  70.0   Mode  :character   Median :29.00  \n                    Mean   : 602.7                      Mean   :35.07  \n                    3rd Qu.:  90.0                      3rd Qu.:44.25  \n                    Max.   :7000.0                      Max.   :67.00  \n                    NA's   :1                                          \n     Eye           \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender   Age Eye  \n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;\n1 180        80 M         33 black\n2 175        70 O         23 black\n3 sixty      60 F         25 black\n4 178        76 F         23 black\n5 192        90 NA        67 blue \n6 6          55 F         17 blue \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90.00\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n35.07\n17.16\n16\n23\n29\n44.25\n67\n▇▂▂▁▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n35.85\n17.61\n16\n23.00\n33\n45\n67\n▇▂▂▁▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n35.85\n17.61\n16\n23.00\n33\n45\n67\n▇▂▂▁▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n37.18\n18.79\n16\n23.0\n33\n48.5\n67\n▇▂▃▂▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n37.18\n18.79\n16\n23.0\n33\n48.5\n67\n▇▂▃▂▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEye\n0\n1\n4\n5\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n33.33\n17.63\n16\n23\n24\n45\n67\n▇▂▂▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Chaohua Li Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]